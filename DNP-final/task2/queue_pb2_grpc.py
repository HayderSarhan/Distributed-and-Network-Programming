# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import queue_pb2 as queue__pb2


class QueueStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Put = channel.unary_unary(
                '/queue.Queue/Put',
                request_serializer=queue__pb2.item.SerializeToString,
                response_deserializer=queue__pb2.isFull.FromString,
                )
        self.Peek = channel.unary_unary(
                '/queue.Queue/Peek',
                request_serializer=queue__pb2.empty.SerializeToString,
                response_deserializer=queue__pb2.item.FromString,
                )
        self.Pop = channel.unary_unary(
                '/queue.Queue/Pop',
                request_serializer=queue__pb2.empty.SerializeToString,
                response_deserializer=queue__pb2.item.FromString,
                )
        self.Size = channel.unary_unary(
                '/queue.Queue/Size',
                request_serializer=queue__pb2.empty.SerializeToString,
                response_deserializer=queue__pb2.size.FromString,
                )


class QueueServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Put(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Peek(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Size(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueueServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Put': grpc.unary_unary_rpc_method_handler(
                    servicer.Put,
                    request_deserializer=queue__pb2.item.FromString,
                    response_serializer=queue__pb2.isFull.SerializeToString,
            ),
            'Peek': grpc.unary_unary_rpc_method_handler(
                    servicer.Peek,
                    request_deserializer=queue__pb2.empty.FromString,
                    response_serializer=queue__pb2.item.SerializeToString,
            ),
            'Pop': grpc.unary_unary_rpc_method_handler(
                    servicer.Pop,
                    request_deserializer=queue__pb2.empty.FromString,
                    response_serializer=queue__pb2.item.SerializeToString,
            ),
            'Size': grpc.unary_unary_rpc_method_handler(
                    servicer.Size,
                    request_deserializer=queue__pb2.empty.FromString,
                    response_serializer=queue__pb2.size.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'queue.Queue', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Queue(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue.Queue/Put',
            queue__pb2.item.SerializeToString,
            queue__pb2.isFull.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Peek(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue.Queue/Peek',
            queue__pb2.empty.SerializeToString,
            queue__pb2.item.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue.Queue/Pop',
            queue__pb2.empty.SerializeToString,
            queue__pb2.item.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Size(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/queue.Queue/Size',
            queue__pb2.empty.SerializeToString,
            queue__pb2.size.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
